package Main;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author chellong
 */
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.util.Map;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javazoom.jl.player.Player;
import org.tritonus.share.sampled.TAudioFormat;

/**
 *
 * @author Long Nguyen Nhat
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    JFileChooser fileDialog = new JFileChooser();
    String fileName;
    Player player; //đối tượng player để phát 1 bài hát
    Thread playingThread; //thread chạy bài hát
    Thread strackBarThread; //thread chạy thanh slider
    int max = 0; //biến lưu giá trị tối đa của thanh slider (thời lương bài hát)
    Vector header = new Vector(); //lưu dữ liệu về tiêu đề (tên bài hát, thời lượng, path)
    Vector data = new Vector(); //lưu dữ liệu danh sách các bài hát
    DefaultTableModel tblmodel; //đối tượng model

    public Main() {
        initComponents();
        this.setTitle("IMusic");
        this.setIconImage(new ImageIcon(getClass().getResource("artworks-000070726946-8tu2tl-large.jpg")).getImage());
        this.setLocationRelativeTo(null);
        header.add("tên bài hát");
        header.add("thời lượng");
        header.add("vị trí");
//        data.setSize(10);
        tblmodel = (DefaultTableModel) tblSongList.getModel();//kết nối songlist với model
        tblmodel.setDataVector(data, header); //thêm 2 vector vào model

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lbFileOpen = new javax.swing.JLabel();
        txtSelectedFile = new javax.swing.JTextField();
        btnOpen = new javax.swing.JButton();
        sldsilderProgress = new javax.swing.JSlider();
        btnPlay = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSongList = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mniOpen = new javax.swing.JCheckBoxMenuItem();
        mniPlay = new javax.swing.JCheckBoxMenuItem();
        mniStop = new javax.swing.JCheckBoxMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mniExit = new javax.swing.JCheckBoxMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mniAbout = new javax.swing.JCheckBoxMenuItem();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 0, 204));

        lbFileOpen.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbFileOpen.setForeground(new java.awt.Color(51, 0, 255));
        lbFileOpen.setText("tập tin đã mở");

        txtSelectedFile.setForeground(new java.awt.Color(138, 39, 151));
        txtSelectedFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSelectedFileActionPerformed(evt);
            }
        });

        btnOpen.setText("chọn bài");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        sldsilderProgress.setBackground(new java.awt.Color(132, 50, 135));

        btnPlay.setBackground(new java.awt.Color(255, 0, 204));
        btnPlay.setText("bắt đầu");
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        btnStop.setBackground(new java.awt.Color(255, 0, 204));
        btnStop.setText("kết thúc");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnRemove.setText("xóa khỏi danh sách");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnSave.setText("lưu danh sách");

        btnAdd.setText("thêm bài hát");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        tblSongList.setForeground(new java.awt.Color(169, 46, 169));
        tblSongList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblSongList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblSongListMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSongListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblSongList);

        jMenu1.setText("File");

        mniOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mniOpen.setSelected(true);
        mniOpen.setText("chọn tệp tin");
        jMenu1.add(mniOpen);

        mniPlay.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mniPlay.setSelected(true);
        mniPlay.setText("bắt đầu");
        mniPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniPlayActionPerformed(evt);
            }
        });
        jMenu1.add(mniPlay);

        mniStop.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        mniStop.setSelected(true);
        mniStop.setText("kết thúc");
        mniStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniStopActionPerformed(evt);
            }
        });
        jMenu1.add(mniStop);
        jMenu1.add(jSeparator1);

        mniExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        mniExit.setSelected(true);
        mniExit.setText("thoát ứng dụng");
        jMenu1.add(mniExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        mniAbout.setSelected(true);
        mniAbout.setText("thông tin ứng dụng");
        jMenu2.add(mniAbout);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtSelectedFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnOpen))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnPlay)
                        .addGap(18, 18, 18)
                        .addComponent(btnStop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 122, Short.MAX_VALUE)
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnSave)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemove))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbFileOpen)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addComponent(sldsilderProgress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(lbFileOpen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOpen)
                    .addComponent(txtSelectedFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(sldsilderProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPlay)
                    .addComponent(btnStop)
                    .addComponent(btnRemove)
                    .addComponent(btnSave)
                    .addComponent(btnAdd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void mniPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniPlayActionPerformed

    }//GEN-LAST:event_mniPlayActionPerformed

    private void mniStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniStopActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mniStopActionPerformed

//    mở file bài hát
    private int getDuration(File f) throws Exception { //lấy ra thời lượng của file theo dạng int
        int mili = 0;
        int sec = 0;
        AudioFileFormat fileFormat = AudioSystem.getAudioFileFormat(f); //lấy ra thông tin cảu file đó
        long microsecond = (long) fileFormat.properties().get("duration");//lấy ra thời lượng file tính bằng micro giây
//        mili = (int) microsecond / 100;//đổi micro ra mili giây
        sec = (int) TimeUnit.MICROSECONDS.toSeconds(microsecond);
//        sec = mili / 1000;//đổi mili giây ra giây
        return sec; //trả về giây
    }

    private String getDurationFormat(File f) throws Exception { //lấy ra thời lượng file theo dang String: giò:phút:giây
//         AudioFileFormat fileFormat = AudioSystem.getAudioFileFormat(f);
//    if (fileFormat instanceof AudioFileFormat) {
//        Map<?, ?> properties = ((AudioFileFormat) fileFormat).properties();
//        String key = "duration";
//        Long microseconds = (Long) properties.get(key);
//        long mili =  (microseconds / 1000);
//        long sec = (mili / 1000) % 60;
//        long min = (mili / 1000) / 60;
//        long hour = mili / 1000;
//        System.out.println("time = " + min + ":" + sec);
//        
//    } else {
//        throw new UnsupportedAudioFileException();
//    }
        try {
            AudioFileFormat fileFormat = AudioSystem.getAudioFileFormat(f); //lấy ra thông tin cảu file đó
        long microsecond = (long) fileFormat.properties().get("duration");
        long minute = TimeUnit.MICROSECONDS.toMinutes(microsecond); //đổi micro sáng phút
        long hour = TimeUnit.MICROSECONDS.toHours(microsecond);//đổi micro san giờ
        long sec = (TimeUnit.MICROSECONDS.toSeconds(microsecond)) - minute * 60;//đổi micro giây thành giây
        return hour + ":" + minute + ":" + sec;
        } catch (Exception e) {
            e.printStackTrace();
        }
        
//        try {
//            AudioFileFormat baseFileFormat = null;
//            AudioFormat baseFormat = null;
//            baseFileFormat = AudioSystem.getAudioFileFormat(f);
//            baseFormat = baseFileFormat.getFormat();
//            // TAudioFormat properties
//            if (baseFormat instanceof TAudioFormat) {
//                Map properties = ((TAudioFormat) baseFormat).properties();
//                System.out.println(properties);
//                String key = "duration";
//                long microsecond = (long) properties.get(key);
//                long minute = TimeUnit.MICROSECONDS.toMinutes(microsecond);
//                long hour = TimeUnit.MICROSECONDS.toHours(microsecond);
//                long sec = (TimeUnit.MICROSECONDS.toSeconds(microsecond)) - minute * 60;
//                return hour + ":" + minute + ":" + sec;
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
        return "";
    }
    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        // TODO add your handling code here:
        try {
            int result = fileDialog.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File f = fileDialog.getSelectedFile();
                if (f.isFile()) {
                    this.txtSelectedFile.setText(f.getCanonicalPath());
                }
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnOpenActionPerformed

    private void txtSelectedFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSelectedFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSelectedFileActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        // TODO add your handling code here:
        if (player != null) { //nếu đã có bài hát rồi
            player.close(); //kết thúc bài hát
        }
        btnPlay.setEnabled(true);// bấm đc nút play
        btnStop.setEnabled(false);//bấm đc nút stop
        sldsilderProgress.setValue(0);
        playingThread.interrupt(); //dừng thread
        strackBarThread.interrupt(); //dừng thread
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        fileName = this.txtSelectedFile.getText(); //lấy đường dẫn file ở ô text
        FileInputStream fis = null;
        BufferedInputStream bis = null;
        File f = new File(fileName);
        try {
            fis = new FileInputStream(f); //đối tượng input
            bis = new BufferedInputStream(fis); //đối tượng bộ đệm
            player = new Player(bis); //đối tượng đọc bài hát
            max = getDuration(f); //lấy ra giá trị max đc tính bằng int
            sldsilderProgress.setMaximum(max); //set max cho slider
        } catch (Exception e) {
        }
        //tạo thread mới
        playingThread = new Thread() { //luồng phát bài hát
            public void run() {
                try {
                    player.play();//phát bài hát
                } catch (Exception e) {
                }
            }
        };
        strackBarThread = new Thread() {
            public void run() {
                try {
                    int n = 0;
                    while (!player.isComplete() && playingThread.isAlive()) {//nếu bài hát chưa chạy xong và thread đang chạy bài hát chạy xong chưa
                        sldsilderProgress.setValue(n);
                        n += 1;
                        Thread.sleep(1000);
                    }
                    sldsilderProgress.setValue(max);//set giá trị thời lượng lớn nhất cho slider
                } catch (Exception e) {
                }
                btnStopActionPerformed(null);
            }
        };
        playingThread.start();
        strackBarThread.start();
        btnPlay.setEnabled(false); //để người dùng không kích đc nút play nữa
        btnStop.setEnabled(true); //có thể ấn dừng lại 
    }//GEN-LAST:event_btnPlayActionPerformed

    void addFileToTable(File[] files) throws Exception { //hàm thêm bài hát vào bảng
        for (File song : files) { //duyệt từng file bài hát 1
            
            String duration = getDurationFormat(song); //lấy ra thời lượng bài hát
            String fileName = song.getName();
            String path = song.getCanonicalPath();
            Vector<String> v = new Vector<String>();//tạo mới 1 vector con để chứa thông tin từng bài hát
            v.add(fileName);//thêm tên bài hát vào vector
            v.add(duration);//thêm thời lượng vào vector
            v.add(path);//thêm đường dẫn vào vector

            data.add(v); //thêm vector con vào vector to
        }
        tblSongList.updateUI();//cập nhật sự thay đổi danh sách bài hát
    }
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        fileDialog.setMultiSelectionEnabled(true);// có thể chọn nhiều file trong dialg
        int result = fileDialog.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File[] files = fileDialog.getSelectedFiles();
            try { //phương thức thêm file vào table ném ngoại lệ nên phải bắt ngoại lệ khi gọi hàm
//               if(this.data.get(0)!=null && this.data.get(0) instanceof Vector) {
//                   for (int i = 0; i < this.data.size(); i++) {
//                       Vector<String> vec = (Vector<String>) this.data.get(i);
//                       for(String str : vec) {
//                           if(i<files.length && str.equals(files[i].getName())) return;
//                       }
//                   }
//               }
                    if(this.data.size()>=1) {
                        for (int i = 0; i < this.data.size(); i++) {
                           if(this.data.get(i) instanceof Vector) {
                               Vector<String> vec = (Vector<String>) this.data.get(i);
                                for (int j = 0; j < vec.size(); j++) {
                                    System.out.println(vec.get(j));
                                    if(vec.get(j).equals(files[0].getName())) {
                                        JOptionPane.showMessageDialog(null, "This song is selected, let's choice other song");
                                        return;
                                    }
                               }
                           }
                        }
                    }
//                for (int i = 0; i < this.data.size(); i++) {
//                    System.out.println(i + " " + this.data.get(i));
//                }
//                for (int i = 0; i < files.length; i++) {
//                    System.out.println(i + " " + files[i]);
//                }
                addFileToTable(files);
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnAddActionPerformed
    //click chuột
    private void tblSongListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSongListMouseClicked
        // TODO add your handling code here:
        int row = tblSongList.getSelectedRow();//chọn row mà click chuột vào
        String location = tblSongList.getValueAt(row, 2).toString(); //lấy chuỗi chứa đường dẫn bài hát đó
        txtSelectedFile.setText(location);////set path vào ô chọn bài hát
        if (evt.getClickCount() == 2) { //nếu số click = 2
            if (playingThread != null) {//nếu có bài hát đang phát
                btnStopActionPerformed(null);//dừng bài hát đang phát lại
            }
            btnPlayActionPerformed(null);//phát bài hát mới
        }
    }//GEN-LAST:event_tblSongListMouseClicked
    //nhả chuột
    private void tblSongListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSongListMouseReleased
        // TODO add your handling code here:
        if (tblSongList.isEditing()) { //nếu bảng vẫn chỉnh sửaddc
            int row = tblSongList.getSelectedRow(); //lấy row
            int column = tblSongList.getSelectedColumn();//lấy col
            tblSongList.getCellEditor(row, column).cancelCellEditing();//không thể chỉnh sủa dòng này đc
        }
    }//GEN-LAST:event_tblSongListMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnStop;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbFileOpen;
    private javax.swing.JCheckBoxMenuItem mniAbout;
    private javax.swing.JCheckBoxMenuItem mniExit;
    private javax.swing.JCheckBoxMenuItem mniOpen;
    private javax.swing.JCheckBoxMenuItem mniPlay;
    private javax.swing.JCheckBoxMenuItem mniStop;
    private javax.swing.JSlider sldsilderProgress;
    private javax.swing.JTable tblSongList;
    private javax.swing.JTextField txtSelectedFile;
    // End of variables declaration//GEN-END:variables
}
